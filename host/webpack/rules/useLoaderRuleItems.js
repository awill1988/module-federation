"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssLoaderItems = exports.cssModulesSupportLoaderItems = exports.babelLoader = exports.resolveUrlLoader = exports.typingsCssModulesLoader = exports.lessLoader = exports.miniCssExtractLoader = exports.postCssLoader = exports.sassLoaderItems = exports.cssLoader = void 0;
var path_1 = require("path");
var mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
var config_1 = require("../config");
var utils_1 = require("../utils");
exports.cssLoader = {
    loader: "css-loader",
};
/**
 * Sass loader with sass-resources-loader
 */
exports.sassLoaderItems = [
    {
        loader: "sass-loader",
        options: {
            sourceMap: true,
            implementation: require("sass"),
        },
    },
    config_1.sassResourceItems.length
        ? {
            loader: "sass-resources-loader",
            options: {
                resources: config_1.sassResourceItems,
            },
        }
        : null,
];
exports.postCssLoader = {
    loader: "postcss-loader",
    options: {
        postcssOptions: {
            config: path_1.join(utils_1.rootDir, "postcss.config.js"),
        },
        sourceMap: true,
    },
};
/***
 * Using MiniCssExtractPlugin in production or style-loader in development
 * @see https://webpack.js.org/plugins/mini-css-extract-plugin/#root
 * @see https://webpack.js.org/loaders/style-loader/#root
 */
exports.miniCssExtractLoader = utils_1.isProd
    ? {
        loader: mini_css_extract_plugin_1.default.loader,
        options: {
            esModule: false,
        },
    }
    : {
        loader: "style-loader",
        options: {
            esModule: false,
        },
    };
/**
 * @see https://webpack.js.org/loaders/less-loader/#root
 */
exports.lessLoader = {
    loader: "less-loader",
    options: {
        sourceMap: true,
        lessOptions: {
            javascriptEnabled: true,
        },
    },
};
/**
 * Using to convert CSS modules from css-loader to TypeScript typings
 * @see https://github.com/TeamSupercell/typings-for-css-modules-loader
 */
exports.typingsCssModulesLoader = {
    loader: "@teamsupercell/typings-for-css-modules-loader",
    options: {
        banner: "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!",
        formatter: "prettier",
    },
};
/**
 * @see https://webpack.js.org/loaders/sass-loader/#problems-with-url
 */
exports.resolveUrlLoader = {
    loader: "resolve-url-loader",
    options: { removeCR: true, sourceMap: true },
};
exports.babelLoader = {
    loader: "babel-loader",
    options: {
        configFile: path_1.join(utils_1.rootDir, ".babelrc.js"),
    },
};
exports.cssModulesSupportLoaderItems = [
    exports.miniCssExtractLoader,
    exports.typingsCssModulesLoader,
    __assign(__assign({}, exports.cssLoader), { options: {
            esModule: false,
            modules: {
                exportLocalsConvention: "camelCaseOnly",
                localIdentName: "[local]__[contenthash:base64:5]",
            },
        } }),
];
exports.cssLoaderItems = [exports.miniCssExtractLoader, exports.cssLoader];
